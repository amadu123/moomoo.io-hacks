// ==UserScript==
// @name       TeleMod v2.3
// @namespace    -
// @version    2.3
// @description XD
// @author       TeleMod Dev
// @match        *://sandbox.moomoo.io/*
// @match        *://moomoo.io/*
// @grant        none
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @require https://cdn.jsdelivr.net/gh/emn178/js-sha3/build/sha3.min.js

// ==/UserScript==

let hue = 0;

let replaceInterval = setInterval(() => {
    if (CanvasRenderingContext2D.prototype.roundRect) {
        CanvasRenderingContext2D.prototype.roundRect = (oldFunc =>
                                                        function() {
            if (this.fillStyle == "#8ecc51") this.fillStyle = `hsl(180, 100%, 50%)`;
            return oldFunc.call(this, ...arguments);
        })(CanvasRenderingContext2D.prototype.roundRect);
        clearInterval(replaceInterval);
    }
}, 10);

function changeHue() {
    hue += Math.random() * 10;
}

setInterval(changeHue, 10);

let mouseX;
let mouseY;

let width;
let height;
var AutoMill = 0;
(function() {
    var Mill1;
    var Mill2;
    var Mill3;
    var MillMod = true;
    document.addEventListener('keydown', function(e) {
        if (e.keyCode == 78 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            AutoMill = (AutoMill + 1) % 2;
            if (AutoMill == 0) {
                doNewSend(["ch", [""]]);
            }else {
                doNewSend(["ch", [""]]);
            }
            e.preventDefault();
            if (MillMod) {
                Mill1 = setTimeout(function() {
                    h1();
                }, 0);
            } else {
                clearTimeout(Mill1);
                clearTimeout(Mill2);
                clearTimeout(Mill3);
            }
            MillMod = !MillMod;
        }
    }
                             );
    function h1() {
        clearTimeout(Mill1);
        place(millType, milldir + toRad(180));
        //place(millType, milldir + toRad((9000000005) - 180));
        place(millType, milldir + toRad((9000000077) - 180));
        place(millType, milldir + toRad((9000000293) - 180));
        //doNewSend(["33", [Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(0 + 180)]]);
        //milldir = (Math.atan2(mouseY - height / 2, mouseX - width / 2) + 180);
        Mill1 = setTimeout(function() {
            h1();
        }, 0);
    }
    function h2() {
        place(millType, milldir + toRad(100));
        place(millType, milldir + toRad(180));
        place(millType, milldir + toRad(260));
        Mill1 = setTimeout(function() {
            h2();
        }, 0);
    }
    function h3() {
        clearTimeout(Mill2);
        place(millType, milldir + toRad(100));
        place(millType, milldir + toRad(180));
        place(millType, milldir + toRad(260));
        Mill1 = setTimeout(function() {
            h3();
        }, 0);
    }
})();
setInterval(() => {
    if (clanToggle == 1) {
        doNewSend(["9", [null]]);
        doNewSend(["8", [animate(false, 5)]]);
    }
    doNewSend(["testing", [6]]);
}, 200);

setInterval(() => {
    if (messageToggle == 1) {
        doNewSend(["ch", [animate(true, 5)]]);
    }
}, 200);

setInterval(() => {
    if (autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
    }
}, 0);

setInterval(() => {
    if (autoprimary == true) {
        doNewSend(["5", [primary, true]]);
    }
}, 0);

setInterval(() => {
    if (autosecondary == true) {
        doNewSend(["5", [secondary, true]]);
    }
}, 0);

setInterval(() => {
    if (hatToggle == 1) {
        if (oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat");
        }
        if (oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc");
        }
        oldHat = normalHat;
        oldAcc = normalAcc;
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function aim(x, y) {
    var cvs = document.getElementById("gameCanvas");
    cvs.dispatchEvent(
        new MouseEvent("mousemove", {
            clientX: x,
            clientY: y
        })
    );
}

let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var autoprimary = false;
var autosecondary = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var milldir;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
var magic = 0;
var winter = false;
var clowned = 0;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};

let healSpeed = 60;
var messageToggle = 0;
var clanToggle = 0;
let healToggle = 1;
let hatToggle = 1;
let AutoPlague = 0;
var healto;

setInterval(() => {
    clowned = myPlayer.hat = 45;
    if (myPlayer.hat == 45 && myPlayer.health < 100) {
        doNewSend(["ch", ["I have been clowned!"]]);
        doNewSend(["13c", [1, 13, 0]]);
        doNewSend(["13c", [0, 13, 0]]);
        doNewSend(["13c", [1, 13, 1]]);
        doNewSend(["13c", [0, 13, 1]]);
    }
}, 700);

document.msgpack = msgpack;
function n() {
    this.buffer = new Uint8Array([0]);
    this.buffer.__proto__ = new Uint8Array();
    this.type = 0;
}

const CanvasAPI = document.getElementById("gameCanvas");
CanvasAPI.addEventListener("mousedown", buttonPressD, false);
function buttonPressD(e) {
    if (e.button == 2) {
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["5", ["primary", true]]);
        doNewSend(["13c", [0, 40, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["7", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["7", [1]]);
            doNewSend(["13c", [0, 21, 1]]);
            if (myPlayer.y < 2400){
                doNewSend(["13c", [0, 11, 0]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
                doNewSend(["13c", [0, 31, 0]]);
            } else {
                doNewSend(["13c", [0, 11, 0]]);
            }
        }, 120);
    }
    if (e.button == 0) {
        doNewSend(["5", ["primary", true]]);
        doNewSend(["13c", [1, 21, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["7", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["7", [1]]);
            doNewSend(["13c", [0, 21, 1]]);
            if (myPlayer.y < 2400){
                doNewSend(["13c", [0, 11, 0]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
                doNewSend(["13c", [0, 31, 0]]);
            } else {
                doNewSend(["13c", [0, 11, 0]]);
            }
        }, 120);
    }
    if (e.button == 1) {
        doNewSend(["ch", [""]]);
        AutoPlague = (AutoPlague + 1) % 2;
        doNewSend(["5", ["length", true]]);
    }
    /*
    if (e.button == 0 && AutoPlague == 1) {
        doNewSend(["13c", [1, 21, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["7", [1]]);
        setTimeout(() => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
        }, 120);
        setTimeout(() => {
            doNewSend(["7", [1]]);
        }, 200);
    }
    if (e.button == 2 && AutoPlague == 1) {
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["13c", [0, 40, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["7", [1]]);
        setTimeout(() => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
        }, 120);
        setTimeout(() => {
            doNewSend(["7", [1]]);
        }, 200);
    }*/
}

WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m) {
    if (!ws) {
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};

function socketFound(socket) {
    socket.addEventListener("message", function(message) {
        handleMessage(message);
    });
}
var AIH = false;
var ACHH = 0;
function handleMessage(m) {
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if (temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array) {
            data = data;
        }
    } else {
        data = temp;
    }
    let item = data[0];
    if (!data) {
        return;
    }

    if (item === "io-init") {
        let cvs = document.getElementById("gameCanvas");
        width = cvs.clientWidth;
        height = cvs.clientHeight;
        $(window).resize(function() {
            width = cvs.clientWidth;
            height = cvs.clientHeight;
        });
        cvs.addEventListener("mousemove", e => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });
    }
    if(myPlayer.hat == 6) {
        healto = 40;
    } else {
        healto = 51;
    }
    if (item == "h" && data[1] == myPlayer.id) {
        if (data[2] < 100 && data[2] > 49 && AIH == true) {
            place(foodType, null);
            setTimeout(() => {
                hat(6);
                acc(21);
            }, 100);

        } else if (data[2] < 49 && data[2] > 10 && ACH == true) {
            setTimeout(() => {
                hat(22);
                acc(13);
            }, 100);
            setTimeout(() => {
                place(foodType, null);
                place(foodType, null);
                place(foodType, null);
                place(foodType, null);
                place(foodType, null);

            }, 0);
            //setTimeout(() => {}, 200);
            setTimeout(() => {
                //doNewSend(["5", ["length", true]]);
                doNewSend(["ch", ["AntiClown"]]);
                hat(7);
                acc(13);
            }, 100);
            setTimeout(() => {
                hat(12);
                acc(11);
            }, 130);
        }
    }

    if (item == "1" && myPlayer.id == null) {
        myPlayer.id = data[1];
    }

    if (item == "33") {
        enemiesNear = [];
        for (let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13 * i, 13 * i + 13);
            if (playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if (playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }

    isEnemyNear = false;
    if (enemiesNear) {
        nearestEnemy = enemiesNear.sort(
            (a, b) => dist(a, myPlayer) - dist(b, myPlayer)
        )[0];
    }

    if (nearestEnemy) {
        nearestEnemyAngle = Math.atan2(
            nearestEnemy[2] - myPlayer.y,
            nearestEnemy[1] - myPlayer.x
        );
        if (
            Math.sqrt(
                Math.pow(myPlayer.y - nearestEnemy[2], 2) +
                Math.pow(myPlayer.x - nearestEnemy[1], 2)
            ) < 0
        ) {
            isEnemyNear = true;
            if (autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if (primary != 8) {
                    normalAcc = 19;
                }
            }
        }
    }
    if (isEnemyNear == false && autoaim == false) {
        normalAcc = 11;
        if (myPlayer.y < 2400) {
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
            normalHat = 31;
        } else {
            normalHat = 12;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
    /*if (nearestEnemy == 100) {
        doNewSend(["ch", ["Enemy Near"]]);
        doNewSend(["13c", [1, 11, 0]]);
        doNewSend(["13c", [0, 11, 0]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
    }
*/
    if (item == "h" && data[1] == myPlayer.id) {
        if (data[2] < 100 && data[2] > 0 && healToggle == 1) {
            setTimeout(() => {
                place(foodType, null);
                //sending multiple food packets is how u get clown
            }, 160);
        }
    }
    update();
}

function doNewSend(sender) {
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}

function place(
id,
 angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)
) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function placeQ(
id,
 angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)
) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, null]]);
    doNewSend(["c", [0, null]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function boostSpike() {
    if (boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(spikeType, boostDir + toRad(90));
    place(spikeType, boostDir - toRad(90));
    place(boostType, boostDir);
    doNewSend(["33", [boostDir]]);
}

var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if (
                keycode == key &&
                document.activeElement.id.toLowerCase() !== "chatbox"
            ) {
                _isKeyDown = true;
                if (_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if (!_isKeyDown) {
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if (
                keycode == key &&
                document.activeElement.id.toLowerCase() !== "chatbox"
            ) {
                _isKeyDown = false;
            }
        }
    };
};

const healer1 = repeater(
    51,
    () => {
        placeQ(foodType, null);
        placeQ(foodType, null);
        placeQ(foodType, null);
    },
    30
);
const healer2 = repeater(
    81,
    () => {
        placeQ(foodType, null);
        placeQ(foodType, null);
        placeQ(foodType, null);
    },
    30
);
const boostPlacer = repeater(70, fourBoost, 0);
const fourSpawnpader = repeater(75, fourSpawnpad, 0);
const spikePlacer = repeater(
    86,
    () => {
        place(spikeType);
    },
    0
);
//const millPlacer = repeater(78, () => {place(millType, myPlayer.dir + toRad(0))}, 0);
//const millPlacer = repeater(78,() => {place(millType)},0);
const turretPlacer = repeater(72,tripturr,0);
var ACH = true;
document.addEventListener("keydown", e => {
    spikePlacer.start(e.keyCode);
    fourSpawnpader.start(e.keyCode);
    healer1.start(e.keyCode);
    healer2.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    //millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);
    if (
        e.keyCode == 49 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        autosecondary = false;
        autoprimary = true;
        setTimeout(() => {
            autoprimary = false;
        }, 500);
    }
    if (
        e.keyCode == 50 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        autoprimary = false;
        autosecondary = true;
        setTimeout(() => {
            autosecondary = false;
        }, 500);
    }

    if (
        e.keyCode == 71 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 13, 1]]);
        doNewSend(["13c", [0, 13, 1]]);
    }
    if (
        e.keyCode == 189 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        ///num2 katana+spinspike [age 1]
        if (AIH == true) {
            AIH = false;
            doNewSend(["ch", ["AntiInsta:OFF"]]);
        } else {
            AIH = true;
            doNewSend(["ch", ["AntiInsta:ON"]]);
        }
    }

    if (
        e.keyCode == 187 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        ///num3 greataxe+musket [age 1]
        if (ACH == false) {
            ACH = true;
            doNewSend(["ch", ["AntiClown:ON"]]);
        } else {
            ACH = false;
            doNewSend(["ch", ["AntiClown:OFF"]]);
        }
    }
    if (
        e.keyCode == 75 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        place(spawnpadType, myPlayer.dir + toRad(45));
        place(spawnpadType, myPlayer.dir - toRad(45));
    }
    if (
        e.keyCode == 90 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["13c", [0, 40, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
    }
    if (e.keyCode == 192 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        var llast = myPlayer.hat
        var llastt = myPlayer.accessory
        autoaim = true
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["7", [3]]);
        setTimeout(() => {
            doNewSend(["6", [5]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [23]]);
            doNewSend(["6", [9]]);
            doNewSend(["6", [38]]);
        }, 75);
        setTimeout(() => {
            doNewSend(["6", [4]]);
        }, 155);
        setTimeout(() => {
            doNewSend(["5", [secondary, true]]);
            doNewSend(["13c", [0, 53, 0]]);
        }, 250);
        setTimeout(() => {
            doNewSend(["6", [15]]);
        }, 370);
        setTimeout(() => {
            doNewSend(["7", [3]]);
            doNewSend(["13c", [0, llast, 0]]);
            doNewSend(["13c", [0, llastt, 1]]);
            autoaim = false
        }, 500);
    }
    if (
        e.keyCode == 190 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        autoaim = true;
        autosecondary = true;
        doNewSend(["13c", [0, 32, 0]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["c", [1]]);

        setTimeout(() => {
            doNewSend(["13c", [0, 32, 19]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [0, 32, 0]]);
            doNewSend(["6", [12]]);
        }, 100);

        setTimeout(() => {
            doNewSend(["6", [15]]);
        }, 200);

        setTimeout(() => {
            doNewSend(["c", [0]]);
            doNewSend(["5", [primary, true]]);
            autosecondary = false;
            autoaim = false;
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [0, 20, 0]]);
            setTimeout(() => {
                doNewSend(["5", [secondary, true]]);
                doNewSend(["13c", [1, 20, 0]]);
                doNewSend(["13c", [0, 20, 0]]);
                setTimeout(() => {
                    doNewSend(["5", [primary, true]]);
                    doNewSend(["13c", [0, 12, 0]]);
                }, 1750);
            }, 200);
        }, 300);
    }

    if (
        e.keyCode == 16 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        doNewSend(["13c", [1, 11, 1]]);
        doNewSend(["13c", [0, 11, 1]]);
        if (myPlayer.y < 2400) {
            hat(15);
            magic = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
            hat(31);
            magic = 31;
        } else {
            hat(12);
            magic = 12;
        }
        acc(11);
    }
    function magickk() {
    //if (AutoMill == 1){
        if (milldir > 0.00 && milldir < 0.34){
            milldir = 0.01
        }
        else if (milldir > 0.34 && milldir < 0.79){
            milldir = 0.79;
        }

        if (e.keyCode == 65 &&document.activeElement.id.toLowerCase() !== "chatbox") {
            milldir = 0.00;
            milldir = (milldir + -3.13);
            //milldir = Math.round(milldir/45)*45;
        }
        if (e.keyCode == 68 &&document.activeElement.id.toLowerCase() !== "chatbox") {
            milldir = 0.00;
            milldir = (milldir + 0.01);
            //milldir = Math.round(milldir/45)*45;
        }
        if (e.keyCode == 87 &&document.activeElement.id.toLowerCase() !== "chatbox") {
            milldir = 0.00;
            milldir = (milldir + -1.58);
            //milldir = Math.round(milldir/45)*45;
        }
        if (e.keyCode == 83 &&document.activeElement.id.toLowerCase() !== "chatbox") {
            milldir = 0.00;
            milldir = (milldir + 1.58);
            //milldir = Math.round(milldir/45)*45;
        }

        //milldir = Math['atan2'](mouseY - height / 2, mouseX - width / 2)
        //milldir = (Math.round(milldir/45)*45);

    //}
    }
    if (AutoMill == 1){
        magickk();
    }
    if (
        e.keyCode == 106 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        healToggle = (healToggle + 1) % 2;
    }
    if (
        e.keyCode == 82 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        //doNewSend(["ch", ["this is" + myPlayer.dir]]);
        doNewSend(["ch", [""]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 18, 1]]);
        doNewSend(["7", [1]]);
        setTimeout(() => {
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
            setTimeout(() => {
                autoaim = false;
                doNewSend(["7", [1]]);
                hat(20);
                setTimeout(() => {
                    doNewSend(["5", [primary, true]]);
                    doNewSend(["ch", [""]]);
                    hat(magic);
                    acc(11);
                }, 1500);
            }, 100);
        }, 90);
    }
    if (
        e.keyCode == 48 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        doNewSend(["5", ["length", true]]);
        doNewSend(["ch", [""]]);
    }
    if (
        e.keyCode == 97 &&
        document.activeElement.id.toLowerCase() !== "chatbox"
    ) {
        alives = (alives + 1) % 2;
    }
});
var alives = 0;
var count23 = 0;
var count24 = 0;
setInterval(() => {
    count23 = count23 + 1;
    if (count23 == 60) {
        count23 = 0;
        count24 = count24 + 1;
    }
    if (alives == 1) {
        doNewSend(["ch", ["AliveMin:" + count24 + ",Sec:" + count23]]);
    }
}, 1000);
document.addEventListener("keyup", e => {
    spikePlacer.stop(e.keyCode);
    fourSpawnpader.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    //millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    healer1.stop(e.keyCode);
    healer2.stop(e.keyCode);
});

function isElementVisible(e) {
    return e.offsetParent !== null;
}

function fourSpawnpad() {
    place(spawnpadType, myPlayer.dir + toRad(135));
    place(spawnpadType, myPlayer.dir + toRad(150));
    place(spawnpadType, myPlayer.dir + toRad(165));
    place(spawnpadType, myPlayer.dir + toRad(180));
    place(spawnpadType, myPlayer.dir + toRad(270));
    place(spawnpadType, myPlayer.dir + toRad(360));
}

function fourBoost() {
    place(boostType, myPlayer.dir + toRad(135));
    place(boostType, myPlayer.dir + toRad(150));
    place(boostType, myPlayer.dir + toRad(165));
    place(boostType, myPlayer.dir + toRad(180));
    place(boostType, myPlayer.dir + toRad(270));
    place(boostType, myPlayer.dir + toRad(360));
}

function tripturr() {
    place(turretType, myPlayer.dir + toRad(0));
    place(turretType, myPlayer.dir + toRad(80));
    place(turretType, myPlayer.dir + toRad(280));
}

function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b) {
    return Math.sqrt(Math.pow(b.y - a[2], 2) + Math.pow(b.x - a[1], 2));
}

function inviswep() {
    doNewSend(["5", ["length", !0]]);
}

function update() {
    for (let i = 0; i < 9; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            primary = i;
        }
    }

    for (let i = 9; i < 16; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            secondary = i;
        }
    }

    for (let i = 16; i < 19; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            foodType = i - 16;
        }
    }

    for (let i = 19; i < 22; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            wallType = i - 16;
        }
    }

    for (let i = 22; i < 26; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            spikeType = i - 16;
        }
    }

    for (let i = 26; i < 29; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            millType = i - 16;
        }
    }

    for (let i = 29; i < 31; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            mineType = i - 16;
        }
    }

    for (let i = 31; i < 33; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            boostType = i - 16;
        }
    }

    for (let i = 33; i < 36; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            turretType = i - 16;
        }
    }

    for (let i = 36; i < 37; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            spawnpadType = i - 16;
        }
    }

    for (let i = 37; i < 39; i++) {
        if (
            isElementVisible(document.getElementById("actionBarItem" + i.toString()))
        ) {
            turretType = i - 16;
        }
    }
    $("#linksContainer2").html(
        '<a href="./docs/versions.txt" target="_blank" class="menuLink">⚠!AntiClown!⚠'
    );
    document.getElementById("gameName").innerHTML = "TeleMod";
    document.getElementById("loadingText").innerHTML = "Loading...";
    document.getElementById("enterGame").innerHTML = "Play";
    document.getElementById("chatBox").placeholder = "Type Here";
    $("#mapDisplay").css({ background: `url('http://i.imgur.com/Qllo1mA.png')` });
}
